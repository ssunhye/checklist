import org.apache.tools.ant.filters.ReplaceTokens

buildscript{
    ext {
        springBootVer = '2.5.4'
        querydslVer = '4.4.0'
        querydslPluginVer = '1.0.10'
        springDependencyMgmtVer = '1.0.11'
        springLoadedVer = '1.2.8'
        nodePluginVer = '1.3.1'
    }
    repositories {
        mavenCentral()
        jcenter()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVer}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyMgmtVer}.RELEASE"
        classpath "org.springframework:springloaded:${springLoadedVer}.RELEASE"
        classpath "com.github.node-gradle:gradle-node-plugin:3.1.0"
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVer}"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.node-gradle.node'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url "https://repo.spring.io/release" }
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
}

group = 'com.ssafy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

node {
    download = true
    version = '14.17.0'
    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/../frontend")
}

configurations {
    all {
        //exclude group: "commons-logging", module: "commons-logging"
        //exclude group: "log4j", module: "log4j"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
    providedRuntime
}

task webpack(type: NpmTask, dependsOn: 'npmInstall') {
    args = ['run','build']
}

// processResources is a Java task. Run the webpack bundling before this task using the 'build' task in the package.json
processResources.dependsOn 'webpack'

//set build time and inject value to application.properties
def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd_HHmm')
    return formattedDate
}

project.ext.set("build.date", buildTime())

processResources {
    with copySpec {
        from "src/main/resources"
        include "**/application*.yml"
        include "**/application*.yaml"
        include "**/application*.properties"

        duplicatesStrategy = 'include'
        project.properties.findAll().each {
            prop ->
                if (prop.value != null) {
                    filter(ReplaceTokens, tokens: [ (prop.key): String.valueOf(prop.value)])
                    filter(ReplaceTokens, tokens: [ ('project.' + prop.key): String.valueOf(prop.value)])
                    filter(ReplaceTokens, tokens: [ ('project.ext.' + prop.key): String.valueOf(prop.value)])
                }
        }
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    compileOnly("org.projectlombok:lombok")
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    testImplementation("org.springframework.boot:spring-boot-starter-test")

    annotationProcessor("org.springframework.boot:spring-boot-starter-data-jpa")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    implementation("io.springfox:springfox-boot-starter:3.0.0")
    implementation("com.google.guava:guava:29.0-jre")
    annotationProcessor("com.google.guava:guava:29.0-jre")

    // Hbase 관련 라이브러리
    implementation("org.springframework.data:spring-data-hadoop:2.5.0.RELEASE")
    implementation("org.springframework.data:spring-data-hadoop-hbase:2.5.0.RELEASE")
    //implementation("org.apache.hbase:hbase:3.0.0-alpha-1")
    //implementation("org.apache.hbase:hbase-client:3.0.0-alpha-1")
    //implementation("org.apache.hbase:hbase:1.2.6")
    //implementation("org.apache.hbase:hbase-client:1.2.6")
    implementation("org.apache.hbase:hbase:2.2.3")
    implementation("org.apache.hbase:hbase-client:2.2.3")

    implementation fileTree(dir: 'libs', include:['*.jar'])

    implementation("com.h2database:h2")

    // getVirtualServerName() 오류를 해결하기 위한 버전 업그레이드
    compileOnly ("javax.servlet:javax.servlet-api:4.0.1")

    // 로그 관련 라이브러리
    // implementation("org.apache.logging.log4j:log4j-core:2.14.0")
    implementation ("log4j:log4j:1.2.17")

    // mysql 의존성 추가
    implementation 'mysql:mysql-connector-java'

    // JPA 관련 의존성 추가
    implementation("com.querydsl:querydsl-jpa:${querydslVer}")
    implementation("com.querydsl:querydsl-apt:${querydslVer}")
    annotationProcessor("com.querydsl:querydsl-apt:${querydslVer}:jpa")

    // swagger 관련 의존성 추가
    implementation("io.springfox:springfox-swagger2:3.0.0")
    implementation("io.springfox:springfox-swagger-ui:3.0.0")
    implementation("io.springfox:springfox-data-rest:3.0.0")
    implementation("io.springfox:springfox-bean-validators:3.0.0")
    implementation("io.springfox:springfox-boot-starter:3.0.0")

    implementation("com.querydsl:querydsl-jpa") //querydsl
    implementation("com.querydsl:querydsl-apt") //querydsl

    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")

    // lombok 관련 의존성 추가
    implementation("org.projectlombok:lombok:1.18.20")
    annotationProcessor("org.projectlombok:lombok:1.18.20")
}

//querydsl 적용
def generated= 'src/main/generated'

sourceSets {
    main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
    file(generated).deleteDir()
}

test {
    useJUnitPlatform()
}
